# NGINX gateway config for Health Care Microservices

worker_processes 1;
events { worker_connections 1024; }

http {
    # Log format for debugging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log debug;

    # Upstream services - trỏ đến localhost
    upstream chat_service {
        server host.docker.internal:5000;
    }
    upstream auth_service {
        server auth-service:5001;
    }
    upstream patient_service {
        server host.docker.internal:5002;
    }
    upstream doctor_service {
        server host.docker.internal:5003;
    }
    upstream appointment_service {
        server host.docker.internal:5004;
    }
    upstream laboratory_service {
        server host.docker.internal:5005;
    }
    upstream phamarcy_service {
        server host.docker.internal:5006;
    }
    upstream billing_service {
        server host.docker.internal:5007;
    }
    upstream notification_service {
        server notification-service:5008;
    }

    server {
        listen 80;
        server_name _;

        # CORS headers for development
        add_header Access-Control-Allow-Origin "*" always;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS, PATCH" always;
        add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization,X-CSRFToken,Accept,Origin" always;
        add_header Access-Control-Expose-Headers "Content-Length,Content-Range" always;
        add_header Access-Control-Allow-Credentials "true" always;

        # Handle preflight requests globally
        location / {
            if ($request_method = 'OPTIONS') {
                add_header Access-Control-Allow-Origin "*";
                add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS, PATCH";
                add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization,X-CSRFToken,Accept,Origin";
                add_header Access-Control-Max-Age 1728000;
                add_header Content-Type 'text/plain; charset=utf-8';
                add_header Content-Length 0;
                return 204;
            }

            # Root endpoint - Gateway info
            return 200 '{"message":"Healthcare API Gateway","version":"1.0","status":"running","timestamp":"$time_iso8601"}';
            add_header Content-Type application/json;
        }

        # Health check endpoint
        location /health {
            access_log off;
            return 200 '{"status":"healthy","gateway":"nginx","timestamp":"$time_iso8601"}';
            add_header Content-Type application/json;
        }

        # Gateway status endpoint
        location /status {
            return 200 '{"services":{"auth":"http://auth-service:5001","patient":"http://host.docker.internal:5002","doctor":"http://host.docker.internal:5003","appointment":"http://host.docker.internal:5004","laboratory":"http://host.docker.internal:5005","pharmacy":"http://host.docker.internal:5006","billing":"http://host.docker.internal:5007","notification":"http://notification-service:5008","chat":"http://host.docker.internal:5000"},"gateway_status":"running"}';
            add_header Content-Type application/json;
        }

        # Websocket cho chat-service
        location /api/chatbot/ws/ {
            proxy_pass http://chat_service/api/chatbot/ws/;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Chat services
        location /api/chatbot/ {
            proxy_pass http://chat_service/api/chatbot/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_redirect off;
        }
        
        location /api/chat/ {
            proxy_pass http://chat_service/api/chat/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_redirect off;
        }

        # Auth service
        location /api/auth/ {
            proxy_pass http://auth_service/api/auth/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_redirect off;
        }

        # Auth service without trailing slash
        location /api/auth {
            return 301 /api/auth/;
        }

        # Patient service
        location /api/patient/ {
            proxy_pass http://patient_service/api/patient/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_redirect off;
        }

        location /api/patient {
            return 301 /api/patient/;
        }

        # Doctor service
        location /api/doctor/ {
            proxy_pass http://doctor_service/api/doctor/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_redirect off;
        }

        location /api/doctor {
            return 301 /api/doctor/;
        }

        # Appointment service
        location /api/appointment/ {
            proxy_pass http://appointment_service/api/appointment/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_redirect off;
        }

        # Laboratory service
        location /api/laboratory/ {
            proxy_pass http://laboratory_service/api/laboratory/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_redirect off;
        }

        # Pharmacy service
        location /api/phamarcy/ {
            proxy_pass http://phamarcy_service/api/phamarcy/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_redirect off;
        }

        # Billing service
        location /api/billing/ {
            proxy_pass http://billing_service/api/billing/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_redirect off;
        }

        # Notification service
        location /api/notifications/ {
            proxy_pass http://notification_service/api/notifications/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_redirect off;
        }

        # Handle trailing slash cho notification
        location /api/notifications {
            return 301 /api/notifications/;
        }

        # Static files
        location /static/ {
            alias /static/;
        }

        # Catch-all for undefined routes
        # location ~* ^/api/(.*)$ {
        #     return 404 '{"error":"Service not found","path":"$uri","available_services":["auth","patient","doctor","appointment","laboratory","phamarcy","billing"]}';
        #     add_header Content-Type application/json;
        # }
    }
}